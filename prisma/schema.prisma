// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")  // ðŸ‘ˆ Add this
}
// prisma/schema.prisma


model EmailVerification {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Provider {
  isApproved Boolean @default(false)
  deleted   Boolean  @default(false)
  id        String  @id @default(uuid())
  fullName  String?
  email     String  @unique
  password  String
  phone     String?  @unique
  photo     String?
  fieldId   String?
  location  String?
  // Average rating from all completed services (0-5)
  averageRating Float? @default(0) 
  serviceCategories serviceCategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  field     Field?   @relation(fields: [fieldId], references: [id])
  services  Service[]
  comments  Comment[]
}

model Client {
  deleted   Boolean  @default(false)
  id        String  @id @default(uuid())
  fullName  String?
  email     String  @unique
  password  String
  phone     String?  @unique
  photo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services  Service[]
  comments  Comment[]
}

model Service {
  id              String  @id @default(uuid())
  clientId        String
  providerId      String?
  description    String?
  serviceCategories serviceCategory[]
  price           Int
  // Rating given by client (0-5)
  rating   Float? 
  serviceLocation String
  distance        Float?  // Distance traveled in kilometers
  done            Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  client   Client   @relation(fields: [clientId], references: [id])
  provider Provider? @relation(fields: [providerId], references: [id])
  comments Comment[]
}

model Comment {
  id         String  @id @default(uuid())
  clientId   String
  providerId String
  serviceId  String
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  client   Client   @relation(fields: [clientId], references: [id])
  provider Provider @relation(fields: [providerId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
}


model Admin {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id    String  @id @default(uuid())
  name  serviceCategory  @unique
  providers Provider[]
}
enum serviceCategory {
  TOWING
  FLAT_TIRE
  FUEL_DELIVERY
  LOCKOUT
  EMERGENCY
  OTHER
}
